
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.22 (git sha1 f109fa3d4c5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openlane/designs/dff_ram/src/ram.v
Parsing SystemVerilog input from `/openlane/designs/dff_ram/src/ram.v' to AST representation.
Generating RTLIL representation for module `\dff_ram'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/dff_ram/runs/first_run/tmp/synthesis/hierarchy.dot'.
Dumping module dff_ram to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \dff_ram

3.2. Analyzing design hierarchy..
Top module:  \dff_ram
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \dff_ram

5.1.2. Analyzing design hierarchy..
Top module:  \dff_ram
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$/openlane/designs/dff_ram/src/ram.v:11$2 in module dff_ram.
Removed a total of 0 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

5.2.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\dff_ram.$proc$/openlane/designs/dff_ram/src/ram.v:11$2'.
     1/7: $2$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_EN[4:0]$11
     2/7: $2$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_DATA[4:0]$10
     3/7: $2$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_ADDR[6:0]$9
     4/7: $1$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_EN[4:0]$8
     5/7: $1$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_DATA[4:0]$7
     6/7: $1$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_ADDR[6:0]$6
     7/7: $0\r_data[71:0]

5.2.8. Executing PROC_DLATCH pass (convert process syncs to latches).

5.2.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\dff_ram.\r_data' using process `\dff_ram.$proc$/openlane/designs/dff_ram/src/ram.v:11$2'.
  created $dff cell `$procdff$46' with positive edge clock.
Creating register for signal `\dff_ram.$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_ADDR' using process `\dff_ram.$proc$/openlane/designs/dff_ram/src/ram.v:11$2'.
  created $dff cell `$procdff$47' with positive edge clock.
Creating register for signal `\dff_ram.$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_DATA' using process `\dff_ram.$proc$/openlane/designs/dff_ram/src/ram.v:11$2'.
  created $dff cell `$procdff$48' with positive edge clock.
Creating register for signal `\dff_ram.$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_EN' using process `\dff_ram.$proc$/openlane/designs/dff_ram/src/ram.v:11$2'.
  created $dff cell `$procdff$49' with positive edge clock.

5.2.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\dff_ram.$proc$/openlane/designs/dff_ram/src/ram.v:11$2'.
Removing empty process `dff_ram.$proc$/openlane/designs/dff_ram/src/ram.v:11$2'.
Cleaned up 2 empty switches.

5.2.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.3. Executing FLATTEN pass (flatten design).

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..
Removed 3 unused cells and 24 unused wires.
<suppressed ~4 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$17.
    dead port 2/2 on $mux $procmux$23.
    dead port 2/2 on $mux $procmux$29.
Removed 3 multiplexer ports.
<suppressed ~4 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram.
    Consolidated identical input bits for $mux cell $procmux$15:
      Old ports: A=5'00000, B=5'11111, Y=$procmux$15_Y
      New ports: A=1'0, B=1'1, Y=$procmux$15_Y [0]
      New connections: $procmux$15_Y [4:1] = { $procmux$15_Y [0] $procmux$15_Y [0] $procmux$15_Y [0] $procmux$15_Y [0] }
  Optimizing cells in module \dff_ram.
    Consolidated identical input bits for $mux cell $procmux$32:
      Old ports: A=5'00000, B=$2$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_EN[4:0]$11, Y=$0$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_EN[4:0]$5
      New ports: A=1'0, B=$procmux$15_Y [0], Y=$0$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_EN[4:0]$5 [0]
      New connections: $0$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_EN[4:0]$5 [4:1] = { $0$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_EN[4:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_EN[4:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_EN[4:0]$5 [0] $0$memwr$\mem$/openlane/designs/dff_ram/src/ram.v:14$1_EN[4:0]$5 [0] }
  Optimizing cells in module \dff_ram.
Performed a total of 2 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.7.9. Rerunning OPT passes. (Maybe there is more to do..)

5.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

5.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram.
Performed a total of 0 changes.

5.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.7.13. Executing OPT_DFF pass (perform DFF optimizations).

5.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..

5.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.7.16. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$46 ($dff) from module dff_ram (D = { 67'0000000000000000000000000000000000000000000000000000000000000000000 $memrd$\mem$/openlane/designs/dff_ram/src/ram.v:17$12_DATA }, Q = \r_data).
Setting constant 0-bit at position 5 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 6 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 7 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 8 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 9 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 10 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 11 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 12 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 13 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 14 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 15 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 16 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 17 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 18 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 19 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 20 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 21 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 22 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 23 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 24 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 25 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 26 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 27 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 28 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 29 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 30 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 31 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 32 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 33 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 34 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 35 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 36 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 37 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 38 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 39 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 40 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 41 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 42 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 43 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 44 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 45 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 46 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 47 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 48 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 49 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 50 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 51 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 52 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 53 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 54 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 55 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 56 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 57 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 58 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 59 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 60 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 61 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 62 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 63 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 64 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 65 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 66 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 67 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 68 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 69 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 70 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.
Setting constant 0-bit at position 71 on $auto$ff.cc:266:slice$51 ($dffe) from module dff_ram.

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.9.9. Rerunning OPT passes. (Maybe there is more to do..)

5.9.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.9.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram.
Performed a total of 0 changes.

5.9.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.9.13. Executing OPT_DFF pass (perform DFF optimizations).

5.9.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..

5.9.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.9.16. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module dff_ram:
  created 0 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.15.9. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

5.16.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).
  Analyzing dff_ram.mem write port 0.

5.16.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

5.16.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\mem'[0] in module `\dff_ram': merging output FF to cell.
    Write port 0: don't care on collision.

5.16.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..
Removed 1 unused cells and 6 unused wires.
<suppressed ~2 debug messages>

5.16.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

5.16.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..

5.16.10. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.
<suppressed ~6 debug messages>

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \mem in module \dff_ram:
  created 72 $dff cells and 0 static cells of width 5.
Extracted data FF from read port 0 of dff_ram.mem: $\mem$rdreg[0]
  read interface: 1 $dff and 127 $mux cells.
  write interface: 72 write mux blocks.

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.
<suppressed ~366 debug messages>

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][2]$403.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][2]$403.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][35]$502.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][35]$502.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][20]$457.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][20]$457.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][23]$466.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][23]$466.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][28]$481.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][28]$481.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][21]$460.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][21]$460.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][33]$496.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][33]$496.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][30]$487.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][30]$487.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][25]$472.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][25]$472.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][22]$463.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][22]$463.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][17]$352.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][17]$352.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][16]$349.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][16]$349.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][15]$346.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][15]$346.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][14]$343.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][14]$343.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][13]$340.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][13]$340.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][12]$337.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][12]$337.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][11]$334.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][11]$334.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][10]$331.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][10]$331.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][9]$328.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][9]$328.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][8]$325.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][8]$325.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][7]$322.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][7]$322.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][6]$319.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][6]$319.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][5]$316.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][5]$316.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][4]$313.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][4]$313.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][3]$310.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][3]$310.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][2]$307.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][2]$307.
    dead port 1/2 on $mux $memory\mem$rdmux[0][5][1]$304.
    dead port 2/2 on $mux $memory\mem$rdmux[0][5][1]$304.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][24]$469.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][24]$469.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][29]$484.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][29]$484.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][34]$499.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][34]$499.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][26]$475.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][26]$475.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][19]$454.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][19]$454.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][15]$442.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][15]$442.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][14]$439.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][14]$439.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][12]$433.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][12]$433.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][11]$430.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][11]$430.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][8]$421.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][8]$421.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][7]$418.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][7]$418.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][5]$412.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][5]$412.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][4]$409.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][4]$409.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][31]$490.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][31]$490.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][27]$478.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][27]$478.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][16]$445.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][16]$445.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][13]$436.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][13]$436.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][9]$424.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][9]$424.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][6]$415.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][6]$415.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][32]$493.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][32]$493.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][17]$448.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][17]$448.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][10]$427.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][10]$427.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][18]$451.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][18]$451.
    dead port 1/2 on $mux $memory\mem$rdmux[0][6][3]$406.
    dead port 2/2 on $mux $memory\mem$rdmux[0][6][3]$406.
Removed 102 multiplexer ports.
<suppressed ~5 debug messages>

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram.
Performed a total of 0 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..
Removed 68 unused cells and 626 unused wires.
<suppressed ~137 debug messages>

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.20.10. Rerunning OPT passes. (Maybe there is more to do..)

5.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

5.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram.
Performed a total of 0 changes.

5.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.20.14. Executing OPT_SHARE pass.

5.20.15. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $memory\mem[3]$69 ($dff) from module dff_ram (D = \data [4:0], Q = \mem[3]).
Adding EN signal on $memory\mem[2]$67 ($dff) from module dff_ram (D = \data [4:0], Q = \mem[2]).
Adding EN signal on $memory\mem[1]$65 ($dff) from module dff_ram (D = \data [4:0], Q = \mem[1]).
Adding EN signal on $memory\mem[0]$63 ($dff) from module dff_ram (D = \data [4:0], Q = \mem[0]).

5.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..
Removed 4 unused cells and 4 unused wires.
<suppressed ~5 debug messages>

5.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.20.18. Rerunning OPT passes. (Maybe there is more to do..)

5.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram.
Performed a total of 0 changes.

5.20.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.20.22. Executing OPT_SHARE pass.

5.20.23. Executing OPT_DFF pass (perform DFF optimizations).

5.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..

5.20.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.20.26. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~92 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\dff_ram' to `<abc-temp-dir>/input.blif'..
Extracted 28 gates and 52 wires to a netlist network with 24 inputs and 10 outputs.

5.23.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:               NOT cells:        1
ABC RESULTS:               MUX cells:       15
ABC RESULTS:                OR cells:        1
ABC RESULTS:               AND cells:        1
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:              NAND cells:        1
ABC RESULTS:            ANDNOT cells:        5
ABC RESULTS:        internal signals:       18
ABC RESULTS:           input signals:       24
ABC RESULTS:          output signals:       10
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.
<suppressed ~5 debug messages>

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..
Removed 1 unused cells and 45 unused wires.
<suppressed ~2 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \dff_ram

5.25.2. Analyzing design hierarchy..
Top module:  \dff_ram
Removed 0 unused modules.

5.26. Printing statistics.

=== dff_ram ===

   Number of wires:                 31
   Number of wire bits:            194
   Number of public wires:          10
   Number of public wire bits:     169
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 50
     $_ANDNOT_                       5
     $_AND_                          1
     $_DFFE_PP_                     25
     $_MUX_                         15
     $_NAND_                         1
     $_ORNOT_                        2
     $_OR_                           1

5.27. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/openlane/designs/dff_ram/runs/first_run/tmp/synthesis/post_techmap.dot'.
Dumping module dff_ram to page 1.
Warning: WIDTHLABEL \mem[0] [0] 1
Warning: WIDTHLABEL \mem[1] [0] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \mem[2] [0] 1
Warning: WIDTHLABEL \mem[3] [0] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \addr [1] 1
Warning: WIDTHLABEL $\mem$rdreg[0]$d [0] 1
Warning: WIDTHLABEL \mem[0] [1] 1
Warning: WIDTHLABEL \mem[1] [1] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \mem[2] [1] 1
Warning: WIDTHLABEL \mem[3] [1] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \addr [1] 1
Warning: WIDTHLABEL $\mem$rdreg[0]$d [1] 1
Warning: WIDTHLABEL \mem[0] [2] 1
Warning: WIDTHLABEL \mem[1] [2] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \mem[2] [2] 1
Warning: WIDTHLABEL \mem[3] [2] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \addr [1] 1
Warning: WIDTHLABEL $\mem$rdreg[0]$d [2] 1
Warning: WIDTHLABEL \mem[0] [3] 1
Warning: WIDTHLABEL \mem[1] [3] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \mem[2] [3] 1
Warning: WIDTHLABEL \mem[3] [3] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \addr [1] 1
Warning: WIDTHLABEL $\mem$rdreg[0]$d [3] 1
Warning: WIDTHLABEL \mem[0] [4] 1
Warning: WIDTHLABEL \mem[1] [4] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \mem[2] [4] 1
Warning: WIDTHLABEL \mem[3] [4] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \addr [1] 1
Warning: WIDTHLABEL $\mem$rdreg[0]$d [4] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \addr [1] 1
Warning: WIDTHLABEL \addr [1] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \addr [1] 1
Warning: WIDTHLABEL \addr [0] 1
Warning: WIDTHLABEL \addr [1] 1
Warning: WIDTHLABEL \data [0] 1
Warning: WIDTHLABEL \mem[0] [0] 1
Warning: WIDTHLABEL \data [1] 1
Warning: WIDTHLABEL \mem[0] [1] 1
Warning: WIDTHLABEL \data [2] 1
Warning: WIDTHLABEL \mem[0] [2] 1
Warning: WIDTHLABEL \data [3] 1
Warning: WIDTHLABEL \mem[0] [3] 1
Warning: WIDTHLABEL \data [4] 1
Warning: WIDTHLABEL \mem[0] [4] 1
Warning: WIDTHLABEL \data [0] 1
Warning: WIDTHLABEL \mem[2] [0] 1
Warning: WIDTHLABEL \data [1] 1
Warning: WIDTHLABEL \mem[2] [1] 1
Warning: WIDTHLABEL \data [2] 1
Warning: WIDTHLABEL \mem[2] [2] 1
Warning: WIDTHLABEL \data [3] 1
Warning: WIDTHLABEL \mem[2] [3] 1
Warning: WIDTHLABEL \data [4] 1
Warning: WIDTHLABEL \mem[2] [4] 1
Warning: WIDTHLABEL \data [0] 1
Warning: WIDTHLABEL \mem[1] [0] 1
Warning: WIDTHLABEL \data [1] 1
Warning: WIDTHLABEL \mem[1] [1] 1
Warning: WIDTHLABEL \data [2] 1
Warning: WIDTHLABEL \mem[1] [2] 1
Warning: WIDTHLABEL \data [3] 1
Warning: WIDTHLABEL \mem[1] [3] 1
Warning: WIDTHLABEL \data [4] 1
Warning: WIDTHLABEL \mem[1] [4] 1
Warning: WIDTHLABEL $\mem$rdreg[0]$d [0] 1
Warning: WIDTHLABEL \r_data [0] 1
Warning: WIDTHLABEL $\mem$rdreg[0]$d [1] 1
Warning: WIDTHLABEL \r_data [1] 1
Warning: WIDTHLABEL $\mem$rdreg[0]$d [2] 1
Warning: WIDTHLABEL \r_data [2] 1
Warning: WIDTHLABEL $\mem$rdreg[0]$d [3] 1
Warning: WIDTHLABEL \r_data [3] 1
Warning: WIDTHLABEL $\mem$rdreg[0]$d [4] 1
Warning: WIDTHLABEL \r_data [4] 1
Warning: WIDTHLABEL \data [0] 1
Warning: WIDTHLABEL \mem[3] [0] 1
Warning: WIDTHLABEL \data [1] 1
Warning: WIDTHLABEL \mem[3] [1] 1
Warning: WIDTHLABEL \data [2] 1
Warning: WIDTHLABEL \mem[3] [2] 1
Warning: WIDTHLABEL \data [3] 1
Warning: WIDTHLABEL \mem[3] [3] 1
Warning: WIDTHLABEL \data [4] 1
Warning: WIDTHLABEL \mem[3] [4] 1

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \dff_ram..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \dff_ram.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\dff_ram'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module dff_ram.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..

10. Printing statistics.

=== dff_ram ===

   Number of wires:                 31
   Number of wire bits:            194
   Number of public wires:          10
   Number of public wire bits:     169
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 50
     $_ANDNOT_                       5
     $_AND_                          1
     $_DFFE_PP_                     25
     $_MUX_                         15
     $_NAND_                         1
     $_ORNOT_                        2
     $_OR_                           1

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/sajjad/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/sajjad/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing TECHMAP pass (map to technology primitives).

13.1. Executing Verilog-2005 frontend: /home/sajjad/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/sajjad/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

13.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

14. Executing SIMPLEMAP pass (map simple cells to gate primitives).

15. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

15.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\dff_ram':
  mapped 25 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

16. Printing statistics.

=== dff_ram ===

   Number of wires:                 56
   Number of wire bits:            219
   Number of public wires:          10
   Number of public wire bits:     169
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 75
     $_ANDNOT_                       5
     $_AND_                          1
     $_MUX_                         40
     $_NAND_                         1
     $_ORNOT_                        2
     $_OR_                           1
     sky130_fd_sc_hd__dfxtp_2       25

[INFO]: USING STRATEGY AREA 0

17. Executing ABC pass (technology mapping using ABC).

17.1. Extracting gate netlist of module `\dff_ram' to `/tmp/yosys-abc-47pCi7/input.blif'..
Extracted 50 gates and 84 wires to a netlist network with 34 inputs and 25 outputs.

17.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-47pCi7/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-47pCi7/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-47pCi7/input.blif 
ABC: + read_lib -w /openlane/designs/dff_ram/runs/first_run/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.06 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/openlane/designs/dff_ram/runs/first_run/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.10 sec
ABC: Memory =    9.54 MB. Time =     0.10 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openlane/designs/dff_ram/runs/first_run/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /openlane/designs/dff_ram/runs/first_run/tmp/synthesis/synthesis.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + &get -n 
ABC: + &st 
ABC: + &dch 
ABC: + &nf 
ABC: + &put 
ABC: + buffer -N 10 -S 750.0 
ABC: + upsize -D 10000.0 
ABC: Current delay (981.92 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =     60 ( 41.7 %)   Cap = 12.4 ff ( 14.6 %)   Area =      541.77 ( 50.0 %)   Delay =  1008.52 ps  ( 80.0 %)               
ABC: Path  0 --       5 : 0    9 pi                      A =   0.00  Df = 112.7  -62.1 ps  S = 165.2 ps  Cin =  0.0 ff  Cout =  35.1 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --      93 : 6    1 sky130_fd_sc_hd__mux4_2 A =  22.52  Df = 526.6  -50.8 ps  S =  75.1 ps  Cin =  2.6 ff  Cout =   1.8 ff  Cmax = 301.2 ff  G =   65  
ABC: Path  2 --      95 : 3    1 sky130_fd_sc_hd__mux2_2 A =  11.26  Df = 789.7 -184.7 ps  S =  45.5 ps  Cin =  2.3 ff  Cout =   2.2 ff  Cmax = 297.6 ff  G =   92  
ABC: Path  3 --      96 : 1    1 sky130_fd_sc_hd__buf_1  A =   3.75  Df =1008.5  -83.5 ps  S = 396.3 ps  Cin =  2.1 ff  Cout =  33.4 ff  Cmax = 130.0 ff  G = 1590  
ABC: Start-point = pi4 (\addr [0]).  End-point = po15 ($auto$rtlil.cc:2560:MuxGate$1277).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   34/   25  lat =    0  nd =    60  edge =    148  area =541.65  delay = 3.00  lev = 3
ABC: + write_blif /tmp/yosys-abc-47pCi7/output.blif 

17.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__and4bb_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and4b_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux4_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__and4_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       25
ABC RESULTS:        internal signals:       25
ABC RESULTS:           input signals:       34
ABC RESULTS:          output signals:       25
Removing temp directory.

18. Executing SETUNDEF pass (replace undef values with defined constants).

19. Executing HILOMAP pass (mapping to constant drivers).

20. Executing SPLITNETS pass (splitting up multi-bit signals).

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \dff_ram..
Removed 0 unused cells and 151 unused wires.
<suppressed ~1 debug messages>

22. Executing INSBUF pass (insert buffer cells for connected wires).

23. Executing CHECK pass (checking for obvious problems).
Checking module dff_ram...
Warning: Wire dff_ram.\r_data [71] is used but has no driver.
Warning: Wire dff_ram.\r_data [70] is used but has no driver.
Warning: Wire dff_ram.\r_data [69] is used but has no driver.
Warning: Wire dff_ram.\r_data [68] is used but has no driver.
Warning: Wire dff_ram.\r_data [67] is used but has no driver.
Warning: Wire dff_ram.\r_data [66] is used but has no driver.
Warning: Wire dff_ram.\r_data [65] is used but has no driver.
Warning: Wire dff_ram.\r_data [64] is used but has no driver.
Warning: Wire dff_ram.\r_data [63] is used but has no driver.
Warning: Wire dff_ram.\r_data [62] is used but has no driver.
Warning: Wire dff_ram.\r_data [61] is used but has no driver.
Warning: Wire dff_ram.\r_data [60] is used but has no driver.
Warning: Wire dff_ram.\r_data [59] is used but has no driver.
Warning: Wire dff_ram.\r_data [58] is used but has no driver.
Warning: Wire dff_ram.\r_data [57] is used but has no driver.
Warning: Wire dff_ram.\r_data [56] is used but has no driver.
Warning: Wire dff_ram.\r_data [55] is used but has no driver.
Warning: Wire dff_ram.\r_data [54] is used but has no driver.
Warning: Wire dff_ram.\r_data [53] is used but has no driver.
Warning: Wire dff_ram.\r_data [52] is used but has no driver.
Warning: Wire dff_ram.\r_data [51] is used but has no driver.
Warning: Wire dff_ram.\r_data [50] is used but has no driver.
Warning: Wire dff_ram.\r_data [49] is used but has no driver.
Warning: Wire dff_ram.\r_data [48] is used but has no driver.
Warning: Wire dff_ram.\r_data [47] is used but has no driver.
Warning: Wire dff_ram.\r_data [46] is used but has no driver.
Warning: Wire dff_ram.\r_data [45] is used but has no driver.
Warning: Wire dff_ram.\r_data [44] is used but has no driver.
Warning: Wire dff_ram.\r_data [43] is used but has no driver.
Warning: Wire dff_ram.\r_data [42] is used but has no driver.
Warning: Wire dff_ram.\r_data [41] is used but has no driver.
Warning: Wire dff_ram.\r_data [40] is used but has no driver.
Warning: Wire dff_ram.\r_data [39] is used but has no driver.
Warning: Wire dff_ram.\r_data [38] is used but has no driver.
Warning: Wire dff_ram.\r_data [37] is used but has no driver.
Warning: Wire dff_ram.\r_data [36] is used but has no driver.
Warning: Wire dff_ram.\r_data [35] is used but has no driver.
Warning: Wire dff_ram.\r_data [34] is used but has no driver.
Warning: Wire dff_ram.\r_data [33] is used but has no driver.
Warning: Wire dff_ram.\r_data [32] is used but has no driver.
Warning: Wire dff_ram.\r_data [31] is used but has no driver.
Warning: Wire dff_ram.\r_data [30] is used but has no driver.
Warning: Wire dff_ram.\r_data [29] is used but has no driver.
Warning: Wire dff_ram.\r_data [28] is used but has no driver.
Warning: Wire dff_ram.\r_data [27] is used but has no driver.
Warning: Wire dff_ram.\r_data [26] is used but has no driver.
Warning: Wire dff_ram.\r_data [25] is used but has no driver.
Warning: Wire dff_ram.\r_data [24] is used but has no driver.
Warning: Wire dff_ram.\r_data [23] is used but has no driver.
Warning: Wire dff_ram.\r_data [22] is used but has no driver.
Warning: Wire dff_ram.\r_data [21] is used but has no driver.
Warning: Wire dff_ram.\r_data [20] is used but has no driver.
Warning: Wire dff_ram.\r_data [19] is used but has no driver.
Warning: Wire dff_ram.\r_data [18] is used but has no driver.
Warning: Wire dff_ram.\r_data [17] is used but has no driver.
Warning: Wire dff_ram.\r_data [16] is used but has no driver.
Warning: Wire dff_ram.\r_data [15] is used but has no driver.
Warning: Wire dff_ram.\r_data [14] is used but has no driver.
Warning: Wire dff_ram.\r_data [13] is used but has no driver.
Warning: Wire dff_ram.\r_data [12] is used but has no driver.
Warning: Wire dff_ram.\r_data [11] is used but has no driver.
Warning: Wire dff_ram.\r_data [10] is used but has no driver.
Warning: Wire dff_ram.\r_data [9] is used but has no driver.
Warning: Wire dff_ram.\r_data [8] is used but has no driver.
Warning: Wire dff_ram.\r_data [7] is used but has no driver.
Warning: Wire dff_ram.\r_data [6] is used but has no driver.
Warning: Wire dff_ram.\r_data [5] is used but has no driver.
Warning: Wire dff_ram.\r_data [4] is used but has no driver.
Warning: Wire dff_ram.\r_data [3] is used but has no driver.
Warning: Wire dff_ram.\r_data [2] is used but has no driver.
Warning: Wire dff_ram.\r_data [1] is used but has no driver.
Warning: Wire dff_ram.\r_data [0] is used but has no driver.
Found and reported 72 problems.

24. Printing statistics.

=== dff_ram ===

   Number of wires:                 86
   Number of wire bits:            229
   Number of public wires:          26
   Number of public wire bits:     169
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                152
     sky130_fd_sc_hd__and2b_2        1
     sky130_fd_sc_hd__and4_2         1
     sky130_fd_sc_hd__and4b_2        2
     sky130_fd_sc_hd__and4bb_2       1
     sky130_fd_sc_hd__buf_1         25
     sky130_fd_sc_hd__conb_1        67
     sky130_fd_sc_hd__dfxtp_2       25
     sky130_fd_sc_hd__mux2_2        25
     sky130_fd_sc_hd__mux4_2         5

   Chip area for module '\dff_ram': 1325.020800

25. Executing Verilog backend.

25.1. Executing BMUXMAP pass.

25.2. Executing DEMUXMAP pass.
Dumping module `\dff_ram'.

Warnings: 109 unique messages, 170 total
End of script. Logfile hash: 281c5c9473, CPU: user 0.51s system 0.04s, MEM: 28.12 MB peak
Yosys 0.22 (git sha1 f109fa3d4c5, gcc 8.3.1 -fPIC -Os)
Time spent: 42% 2x abc (0 sec), 17% 4x stat (0 sec), ...
